const RULES = {
  "1": "prog               -> classDecl funcDef program funcBody ;",
  "2": "classDecl          -> class id classDeclInner { varAndFuncDecl } ; classDecl",
  "3": "classDecl          -> EPSILON",
  "4": "varAndFuncDecl     -> type id varAndFuncDeclTail",
  "5": "varAndFuncDecl     -> EPSILON",
  "6": "varAndFuncDeclTail -> ( fParams ) ; varAndFuncDecl",
  "7": "varAndFuncDeclTail -> arraySize ; varAndFuncDecl",
  "8": "classDeclInner     -> : id classDeclInnerTail",
  "9": "classDeclInner     -> EPSILON",
  "10": "classDeclInnerTail -> , id classDeclInnerTail",
  "11": "classDeclInnerTail -> EPSILON",
  "12": "funcHead           -> type id funcHeadInner ( fParams )",
  "13": "funcHeadInner      -> sr id",
  "14": "funcHeadInner      -> EPSILON",
  "15": "funcDef            -> funcHead funcBody ; funcDef",
  "16": "funcDef            -> EPSILON",
  "17": "funcBody           -> { varDecl statement }",
  "18": "varDecl            -> type id arraySize ; varDecl",
  "19": "varDecl            -> EPSILON",
  "20": "statement          -> for ( type id assignOp expr ; relExpr ; assignStat ) statBlock ; statement",
  "21": "statement          -> if ( expr ) then statBlock else statBlock ; statement",
  "22": "statement          -> return ( expr ) ; statement",
  "23": "statement          -> get ( variable ) ; statement",
  "24": "statement          -> put ( expr ) ; statement",
  "25": "statement          -> assignStat ; statement",
  "26": "statement          -> EPSILON",
  "27": "assignStat         -> variable assignOp expr",
  "28": "statBlock          -> { statement }",
  "29": "statBlock          -> statement",
  "30": "expr               -> arithExpr exprTail",
  "31": "exprTail           -> relExpr",
  "32": "exprTail           -> EPSILON",
  "33": "relExpr            -> relOp arithExpr",
  "34": "arithExpr          -> term arithExprTail",
  "35": "arithExprTail      -> addOp term arithExprTail",
  "36": "arithExprTail      -> EPSILON",
  "37": "sign               -> +",
  "38": "sign               -> -",
  "39": "term               -> factor termTail",
  "40": "termTail           -> multOp factor termTail",
  "41": "termTail           -> EPSILON",
  "42": "factor             -> ( arithExpr )",
  "43": "factor             -> floatNum",
  "44": "factor             -> id varOrFunc",
  "45": "factor             -> intNum",
  "46": "factor             -> not factor",
  "47": "factor             -> sign factor",
  "48": "varOrFunc          -> functionCall",
  "49": "varOrFunc          -> indice",
  "50": "variable           -> id indice",
  "51": "functionCall       -> ( aParams )",
  "52": "indice             -> [ arithExpr ] indice",
  "53": "indice             -> EPSILON",
  "54": "arraySize          -> [ intNum ] arraySize",
  "55": "arraySize          -> EPSILON",
  "56": "type               -> float",
  "57": "type               -> int",
  "58": "fParams            -> type id arraySize fParamsTail",
  "59": "fParams            -> EPSILON",
  "60": "aParams            -> expr aParamsTail",
  "61": "aParams            -> EPSILON",
  "62": "fParamsTail        -> , type id arraySize fParamsTail",
  "63": "fParamsTail        -> EPSILON",
  "64": "aParamsTail        -> , expr aParamsTail",
  "65": "aParamsTail        -> EPSILON",
  "66": "assignOp           -> =",
  "67": "relOp              -> eq",
  "68": "relOp              -> geq",
  "69": "relOp              -> gt",
  "70": "relOp              -> leq",
  "71": "relOp              -> lt",
  "72": "relOp              -> neq",
  "73": "addOp              -> +",
  "74": "addOp              -> -",
  "75": "addOp              -> or",
  "76": "multOp             -> *",
  "77": "multOp             -> /",
  "78": "multOp             -> and"
};
module.exports = {
  RULES,
};
