Sentencial Form:
 prog 
USED RULE :
 prog                -> classDecl funcDef program funcBody ; 

Sentencial Form:
 classDecl @funcDefList funcDef program funcBody @4,1 ; 
USED RULE :
 classDecl           -> EPSILON 

Sentencial Form:
 funcDef program funcBody @4,1 ; 
USED RULE :
 funcDef            -> funcHead funcBody ; funcDef 

Sentencial Form:
 funcHead funcBody @6,1 ; @2,1 funcDef program funcBody @4,1 ; 
USED RULE :
 funcHead           -> type id funcHeadInner ( fParams ) 

Sentencial Form:
 type @scopeSpec @id id funcHeadInner @fparamList ( fParams ) funcBody @6,1 ; @2,1 funcDef program funcBody @4,1 ; 
USED RULE :
 type               -> int 

Sentencial Form:
 int id funcHeadInner @fparamList ( fParams ) funcBody @6,1 ; @2,1 funcDef program funcBody @4,1 ; 
USED RULE :
 funcHeadInner      -> EPSILON 

Sentencial Form:
 int id ( fParams ) funcBody @6,1 ; @2,1 funcDef program funcBody @4,1 ; 
USED RULE :
 fParams            -> EPSILON 

Sentencial Form:
 int id ( ) funcBody @6,1 ; @2,1 funcDef program funcBody @4,1 ; 
USED RULE :
 funcBody           -> { funcBodyInner } 

Sentencial Form:
 int id ( ) { funcBodyInner } @6,1 ; @2,1 funcDef program funcBody @4,1 ; 
USED RULE :
 funcBodyInner      -> varDecl statement 

Sentencial Form:
 int id ( ) { varDecl statement } @6,1 ; @2,1 funcDef program funcBody @4,1 ; 
USED RULE :
 varDecl            -> type id varDeclTail 

Sentencial Form:
 int id ( ) { type @id id varDeclTail statement } @6,1 ; @2,1 funcDef program funcBody @4,1 ; 
USED RULE :
 type               -> int 

Sentencial Form:
 int id ( ) { int id varDeclTail statement } @6,1 ; @2,1 funcDef program funcBody @4,1 ; 
USED RULE :
 varDeclTail        -> arraySize ; varDeclTailTwo 

Sentencial Form:
 int id ( ) { int id arraySize ; @4,1 @2,1 varDeclTailTwo statement } @6,1 ; @2,1 funcDef program funcBody @4,1 ; 
USED RULE :
 arraySize          -> EPSILON 

Sentencial Form:
 int id ( ) { int id ; varDeclTailTwo statement } @6,1 ; @2,1 funcDef program funcBody @4,1 ; 
USED RULE :
 varDeclTailTwo     -> id varDeclTailThree 

Sentencial Form:
 int id ( ) { int id ; id varDeclTailThree statement } @6,1 ; @2,1 funcDef program funcBody @4,1 ; 
USED RULE :
 varDeclTailThree   -> statementIdTwo 

Sentencial Form:
 int id ( ) { int id ; id statementIdTwo statement } @6,1 ; @2,1 funcDef program funcBody @4,1 ; 
USED RULE :
 statementIdTwo     -> assignStat ; statementIdThree 

Sentencial Form:
 int id ( ) { int id ; id assignStat ; @2,1 statementIdThree statement } @6,1 ; @2,1 funcDef program funcBody @4,1 ; 
USED RULE :
 assignStat         -> variable assignOp expr 

Sentencial Form:
 int id ( ) { int id ; id variable @assignStat assignOp expr @3,2 ; @2,1 statementIdThree statement } @6,1 ; @2,1 funcDef program funcBody @4,1 ; 
USED RULE :
 variable           -> EPSILON 

Sentencial Form:
 int id ( ) { int id ; id assignOp expr @3,2 ; @2,1 statementIdThree statement } @6,1 ; @2,1 funcDef program funcBody @4,1 ; 
USED RULE :
 assignOp          -> = 

Sentencial Form:
 int id ( ) { int id ; id = expr @3,2 ; @2,1 statementIdThree statement } @6,1 ; @2,1 funcDef program funcBody @4,1 ; 
USED RULE :
 expr               -> arithExpr exprTail 

Sentencial Form:
 int id ( ) { int id ; id = arithExpr exprTail @3,2 ; @2,1 statementIdThree statement } @6,1 ; @2,1 funcDef program funcBody @4,1 ; 
USED RULE :
 arithExpr          -> term arithExprTail 

Sentencial Form:
 int id ( ) { int id ; id = term arithExprTail exprTail @3,2 ; @2,1 statementIdThree statement } @6,1 ; @2,1 funcDef program funcBody @4,1 ; 
USED RULE :
 term               -> factor termTail 

Sentencial Form:
 int id ( ) { int id ; id = factor termTail arithExprTail exprTail @3,2 ; @2,1 statementIdThree statement } @6,1 ; @2,1 funcDef program funcBody @4,1 ; 
USED RULE :
 factor             -> intNum 

Sentencial Form:
 int id ( ) { int id ; id = intNum termTail arithExprTail exprTail @3,2 ; @2,1 statementIdThree statement } @6,1 ; @2,1 funcDef program funcBody @4,1 ; 
USED RULE :
 termTail           -> EPSILON 

Sentencial Form:
 int id ( ) { int id ; id = intNum arithExprTail exprTail @3,2 ; @2,1 statementIdThree statement } @6,1 ; @2,1 funcDef program funcBody @4,1 ; 
USED RULE :
 arithExprTail      -> addOp term arithExprTail 

Sentencial Form:
 int id ( ) { int id ; id = intNum addOp term @3,2 arithExprTail exprTail @3,2 ; @2,1 statementIdThree statement } @6,1 ; @2,1 funcDef program funcBody @4,1 ; 
USED RULE :
 addOp             -> + 

Sentencial Form:
 int id ( ) { int id ; id = intNum + term @3,2 arithExprTail exprTail @3,2 ; @2,1 statementIdThree statement } @6,1 ; @2,1 funcDef program funcBody @4,1 ; 
USED RULE :
 term               -> factor termTail 

Sentencial Form:
 int id ( ) { int id ; id = intNum + factor termTail @3,2 arithExprTail exprTail @3,2 ; @2,1 statementIdThree statement } @6,1 ; @2,1 funcDef program funcBody @4,1 ; 
USED RULE :
 factor             -> intNum 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum termTail @3,2 arithExprTail exprTail @3,2 ; @2,1 statementIdThree statement } @6,1 ; @2,1 funcDef program funcBody @4,1 ; 
USED RULE :
 termTail           -> multOp factor termTail 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum multOp factor @3,2 termTail @3,2 arithExprTail exprTail @3,2 ; @2,1 statementIdThree statement } @6,1 ; @2,1 funcDef program funcBody @4,1 ; 
USED RULE :
 multOp            -> * 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * factor @3,2 termTail @3,2 arithExprTail exprTail @3,2 ; @2,1 statementIdThree statement } @6,1 ; @2,1 funcDef program funcBody @4,1 ; 
USED RULE :
 factor             -> intNum 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * intNum termTail @3,2 arithExprTail exprTail @3,2 ; @2,1 statementIdThree statement } @6,1 ; @2,1 funcDef program funcBody @4,1 ; 
USED RULE :
 termTail           -> EPSILON 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * intNum arithExprTail exprTail @3,2 ; @2,1 statementIdThree statement } @6,1 ; @2,1 funcDef program funcBody @4,1 ; 
USED RULE :
 arithExprTail      -> EPSILON 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * intNum exprTail @3,2 ; @2,1 statementIdThree statement } @6,1 ; @2,1 funcDef program funcBody @4,1 ; 
USED RULE :
 exprTail           -> EPSILON 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * intNum ; statementIdThree statement } @6,1 ; @2,1 funcDef program funcBody @4,1 ; 
USED RULE :
 statementIdThree   -> EPSILON 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * intNum ; statement } @6,1 ; @2,1 funcDef program funcBody @4,1 ; 
USED RULE :
 statement          -> return ( expr ) ; statementTail 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * intNum ; return ( expr ) @2,1 ; @2,1 statementTail } @6,1 ; @2,1 funcDef program funcBody @4,1 ; 
USED RULE :
 expr               -> arithExpr exprTail 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * intNum ; return ( arithExpr exprTail ) @2,1 ; @2,1 statementTail } @6,1 ; @2,1 funcDef program funcBody @4,1 ; 
USED RULE :
 arithExpr          -> term arithExprTail 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * intNum ; return ( term arithExprTail exprTail ) @2,1 ; @2,1 statementTail } @6,1 ; @2,1 funcDef program funcBody @4,1 ; 
USED RULE :
 term               -> factor termTail 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * intNum ; return ( factor termTail arithExprTail exprTail ) @2,1 ; @2,1 statementTail } @6,1 ; @2,1 funcDef program funcBody @4,1 ; 
USED RULE :
 factor             -> id idnest 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * intNum ; return ( id idnest termTail arithExprTail exprTail ) @2,1 ; @2,1 statementTail } @6,1 ; @2,1 funcDef program funcBody @4,1 ; 
USED RULE :
 idnest             -> indice idnestTail 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * intNum ; return ( id indice @3,1 @2,1 idnestTail termTail arithExprTail exprTail ) @2,1 ; @2,1 statementTail } @6,1 ; @2,1 funcDef program funcBody @4,1 ; 
USED RULE :
 indice             -> EPSILON 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * intNum ; return ( id idnestTail termTail arithExprTail exprTail ) @2,1 ; @2,1 statementTail } @6,1 ; @2,1 funcDef program funcBody @4,1 ; 
USED RULE :
 idnestTail         -> EPSILON 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * intNum ; return ( id termTail arithExprTail exprTail ) @2,1 ; @2,1 statementTail } @6,1 ; @2,1 funcDef program funcBody @4,1 ; 
USED RULE :
 termTail           -> EPSILON 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * intNum ; return ( id arithExprTail exprTail ) @2,1 ; @2,1 statementTail } @6,1 ; @2,1 funcDef program funcBody @4,1 ; 
USED RULE :
 arithExprTail      -> EPSILON 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * intNum ; return ( id exprTail ) @2,1 ; @2,1 statementTail } @6,1 ; @2,1 funcDef program funcBody @4,1 ; 
USED RULE :
 exprTail           -> EPSILON 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * intNum ; return ( id ) ; statementTail } @6,1 ; @2,1 funcDef program funcBody @4,1 ; 
USED RULE :
 statementTail      -> statement 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * intNum ; return ( id ) ; statement } @6,1 ; @2,1 funcDef program funcBody @4,1 ; 
USED RULE :
 statement          -> EPSILON 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * intNum ; return ( id ) ; } ; funcDef program funcBody @4,1 ; 
USED RULE :
 funcDef            -> EPSILON 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * intNum ; return ( id ) ; } ; program funcBody @4,1 ; 
USED RULE :
 funcBody           -> { funcBodyInner } 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * intNum ; return ( id ) ; } ; program { funcBodyInner } @4,1 ; 
USED RULE :
 funcBodyInner      -> varDecl statement 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * intNum ; return ( id ) ; } ; program { varDecl statement } @4,1 ; 
USED RULE :
 varDecl            -> type id varDeclTail 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * intNum ; return ( id ) ; } ; program { type @id id varDeclTail statement } @4,1 ; 
USED RULE :
 type               -> int 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * intNum ; return ( id ) ; } ; program { int id varDeclTail statement } @4,1 ; 
USED RULE :
 varDeclTail        -> arraySize ; varDeclTailTwo 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * intNum ; return ( id ) ; } ; program { int id arraySize ; @4,1 @2,1 varDeclTailTwo statement } @4,1 ; 
USED RULE :
 arraySize          -> EPSILON 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * intNum ; return ( id ) ; } ; program { int id ; varDeclTailTwo statement } @4,1 ; 
USED RULE :
 varDeclTailTwo     -> varDecl 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * intNum ; return ( id ) ; } ; program { int id ; varDecl statement } @4,1 ; 
USED RULE :
 varDecl            -> type id varDeclTail 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * intNum ; return ( id ) ; } ; program { int id ; type @id id varDeclTail statement } @4,1 ; 
USED RULE :
 type               -> int 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * intNum ; return ( id ) ; } ; program { int id ; int id varDeclTail statement } @4,1 ; 
USED RULE :
 varDeclTail        -> arraySize ; varDeclTailTwo 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * intNum ; return ( id ) ; } ; program { int id ; int id arraySize ; @4,1 @2,1 varDeclTailTwo statement } @4,1 ; 
USED RULE :
 arraySize          -> EPSILON 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * intNum ; return ( id ) ; } ; program { int id ; int id ; varDeclTailTwo statement } @4,1 ; 
USED RULE :
 varDeclTailTwo     -> id varDeclTailThree 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * intNum ; return ( id ) ; } ; program { int id ; int id ; id varDeclTailThree statement } @4,1 ; 
USED RULE :
 varDeclTailThree   -> statementIdTwo 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * intNum ; return ( id ) ; } ; program { int id ; int id ; id statementIdTwo statement } @4,1 ; 
USED RULE :
 statementIdTwo     -> assignStat ; statementIdThree 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * intNum ; return ( id ) ; } ; program { int id ; int id ; id assignStat ; @2,1 statementIdThree statement } @4,1 ; 
USED RULE :
 assignStat         -> variable assignOp expr 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * intNum ; return ( id ) ; } ; program { int id ; int id ; id variable @assignStat assignOp expr @3,2 ; @2,1 statementIdThree statement } @4,1 ; 
USED RULE :
 variable           -> EPSILON 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * intNum ; return ( id ) ; } ; program { int id ; int id ; id assignOp expr @3,2 ; @2,1 statementIdThree statement } @4,1 ; 
USED RULE :
 assignOp          -> = 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * intNum ; return ( id ) ; } ; program { int id ; int id ; id = expr @3,2 ; @2,1 statementIdThree statement } @4,1 ; 
USED RULE :
 expr               -> arithExpr exprTail 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * intNum ; return ( id ) ; } ; program { int id ; int id ; id = arithExpr exprTail @3,2 ; @2,1 statementIdThree statement } @4,1 ; 
USED RULE :
 arithExpr          -> term arithExprTail 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * intNum ; return ( id ) ; } ; program { int id ; int id ; id = term arithExprTail exprTail @3,2 ; @2,1 statementIdThree statement } @4,1 ; 
USED RULE :
 term               -> factor termTail 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * intNum ; return ( id ) ; } ; program { int id ; int id ; id = factor termTail arithExprTail exprTail @3,2 ; @2,1 statementIdThree statement } @4,1 ; 
USED RULE :
 factor             -> id idnest 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * intNum ; return ( id ) ; } ; program { int id ; int id ; id = id idnest termTail arithExprTail exprTail @3,2 ; @2,1 statementIdThree statement } @4,1 ; 
USED RULE :
 idnest             -> ( aParams ) idnestTail 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * intNum ; return ( id ) ; } ; program { int id ; int id ; id = id ( aParams ) @3,1 @2,1 idnestTail termTail arithExprTail exprTail @3,2 ; @2,1 statementIdThree statement } @4,1 ; 
USED RULE :
 aParams            -> EPSILON 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * intNum ; return ( id ) ; } ; program { int id ; int id ; id = id ( ) idnestTail termTail arithExprTail exprTail @3,2 ; @2,1 statementIdThree statement } @4,1 ; 
USED RULE :
 idnestTail         -> EPSILON 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * intNum ; return ( id ) ; } ; program { int id ; int id ; id = id ( ) termTail arithExprTail exprTail @3,2 ; @2,1 statementIdThree statement } @4,1 ; 
USED RULE :
 termTail           -> multOp factor termTail 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * intNum ; return ( id ) ; } ; program { int id ; int id ; id = id ( ) multOp factor @3,2 termTail arithExprTail exprTail @3,2 ; @2,1 statementIdThree statement } @4,1 ; 
USED RULE :
 multOp            -> * 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * intNum ; return ( id ) ; } ; program { int id ; int id ; id = id ( ) * factor @3,2 termTail arithExprTail exprTail @3,2 ; @2,1 statementIdThree statement } @4,1 ; 
USED RULE :
 factor             -> intNum 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * intNum ; return ( id ) ; } ; program { int id ; int id ; id = id ( ) * intNum termTail arithExprTail exprTail @3,2 ; @2,1 statementIdThree statement } @4,1 ; 
USED RULE :
 termTail           -> EPSILON 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * intNum ; return ( id ) ; } ; program { int id ; int id ; id = id ( ) * intNum arithExprTail exprTail @3,2 ; @2,1 statementIdThree statement } @4,1 ; 
USED RULE :
 arithExprTail      -> EPSILON 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * intNum ; return ( id ) ; } ; program { int id ; int id ; id = id ( ) * intNum exprTail @3,2 ; @2,1 statementIdThree statement } @4,1 ; 
USED RULE :
 exprTail           -> EPSILON 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * intNum ; return ( id ) ; } ; program { int id ; int id ; id = id ( ) * intNum ; statementIdThree statement } @4,1 ; 
USED RULE :
 statementIdThree   -> EPSILON 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * intNum ; return ( id ) ; } ; program { int id ; int id ; id = id ( ) * intNum ; statement } @4,1 ; 
USED RULE :
 statement          -> put ( expr ) ; statementTail 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * intNum ; return ( id ) ; } ; program { int id ; int id ; id = id ( ) * intNum ; put ( expr ) @2,1 ; @2,1 statementTail } @4,1 ; 
USED RULE :
 expr               -> arithExpr exprTail 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * intNum ; return ( id ) ; } ; program { int id ; int id ; id = id ( ) * intNum ; put ( arithExpr exprTail ) @2,1 ; @2,1 statementTail } @4,1 ; 
USED RULE :
 arithExpr          -> term arithExprTail 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * intNum ; return ( id ) ; } ; program { int id ; int id ; id = id ( ) * intNum ; put ( term arithExprTail exprTail ) @2,1 ; @2,1 statementTail } @4,1 ; 
USED RULE :
 term               -> factor termTail 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * intNum ; return ( id ) ; } ; program { int id ; int id ; id = id ( ) * intNum ; put ( factor termTail arithExprTail exprTail ) @2,1 ; @2,1 statementTail } @4,1 ; 
USED RULE :
 factor             -> id idnest 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * intNum ; return ( id ) ; } ; program { int id ; int id ; id = id ( ) * intNum ; put ( id idnest termTail arithExprTail exprTail ) @2,1 ; @2,1 statementTail } @4,1 ; 
USED RULE :
 idnest             -> indice idnestTail 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * intNum ; return ( id ) ; } ; program { int id ; int id ; id = id ( ) * intNum ; put ( id indice @3,1 @2,1 idnestTail termTail arithExprTail exprTail ) @2,1 ; @2,1 statementTail } @4,1 ; 
USED RULE :
 indice             -> EPSILON 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * intNum ; return ( id ) ; } ; program { int id ; int id ; id = id ( ) * intNum ; put ( id idnestTail termTail arithExprTail exprTail ) @2,1 ; @2,1 statementTail } @4,1 ; 
USED RULE :
 idnestTail         -> EPSILON 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * intNum ; return ( id ) ; } ; program { int id ; int id ; id = id ( ) * intNum ; put ( id termTail arithExprTail exprTail ) @2,1 ; @2,1 statementTail } @4,1 ; 
USED RULE :
 termTail           -> EPSILON 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * intNum ; return ( id ) ; } ; program { int id ; int id ; id = id ( ) * intNum ; put ( id arithExprTail exprTail ) @2,1 ; @2,1 statementTail } @4,1 ; 
USED RULE :
 arithExprTail      -> EPSILON 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * intNum ; return ( id ) ; } ; program { int id ; int id ; id = id ( ) * intNum ; put ( id exprTail ) @2,1 ; @2,1 statementTail } @4,1 ; 
USED RULE :
 exprTail           -> EPSILON 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * intNum ; return ( id ) ; } ; program { int id ; int id ; id = id ( ) * intNum ; put ( id ) ; statementTail } @4,1 ; 
USED RULE :
 statementTail      -> statement 

Sentencial Form:
 int id ( ) { int id ; id = intNum + intNum * intNum ; return ( id ) ; } ; program { int id ; int id ; id = id ( ) * intNum ; put ( id ) ; statement } @4,1 ; 
USED RULE :
 statement          -> EPSILON 

Successfully parsed! 
 int id ( ) { int id ; id = intNum + intNum * intNum ; return ( id ) ; } ; program { int id ; int id ; id = id ( ) * intNum ; put ( id ) ; } ; 
Token Stream : 
 int id ( ) { int id ; id = intNum + intNum * intNum ; return ( id ) ; } ; program { int id ; int id ; id = id ( ) * intNum ; put ( id ) ; } ; $