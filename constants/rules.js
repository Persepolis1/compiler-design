const RULES =
{
  "1": "prog                -> classDecl funcDef program funcBody ;",
  "2": "classDecl           -> class id classDeclInner { varAndFuncDecl } ; classDecl",
  "3": "classDecl           -> EPSILON",
  "4": "varAndFuncDecl      -> type id varAndFuncDeclTail",
  "5": "varAndFuncDecl      -> id id varAndFuncDeclTail",
  "6": "varAndFuncDecl      -> EPSILON",
  "7": "varAndFuncDeclTail  -> ( fParams ) ; varAndFuncDecl",
  "8": "varAndFuncDeclTail  -> arraySize ; varAndFuncDecl",
  "9": "classDeclInner      -> : id classDeclInnerTail",
  "10": "classDeclInner     -> EPSILON",
  "11": "classDeclInnerTail -> , id classDeclInnerTail",
  "12": "classDeclInnerTail -> EPSILON",
  "13": "funcHead           -> type id funcHeadInner ( fParams )",
  "14": "funcHead           -> id id funcHeadInner ( fParams )",
  "15": "funcHeadInner      -> sr id",
  "16": "funcHeadInner      -> EPSILON",
  "17": "funcDef            -> funcHead funcBody ; funcDef",
  "18": "funcDef            -> EPSILON",
  "19": "funcBody           -> { funcBodyInner }",
  "20": "funcBodyInner      -> id varDeclId statement",
  "21": "funcBodyInner      -> statement",
  "22": "funcBodyInner      -> varDecl statement",
  "23": "varDecl            -> type id varDeclTail",
  "24": "varDeclId          -> id varDeclTail",
  "25": "varDeclTail        -> arraySize ; varDeclTailTwo",
  "26": "varDeclTailTwo     -> id varDeclTailThree",
  "27": "varDeclTailTwo     -> varDecl",
  "28": "varDeclTailTwo     -> EPSILON",
  "29": "varDeclTailThree   -> varDeclId",
  "30": "varDeclTailThree   -> statementIdTwo",
  "31": "statement          -> for ( statementForTail",
  "32": "statement          -> if ( expr ) then statBlock else statBlock ; statementTail",
  "33": "statement          -> return ( expr ) ; statementTail",
  "34": "statement          -> get ( id idnest ) ; statementTail",
  "35": "statement          -> put ( expr ) ; statementTail",
  "36": "statement          -> EPSILON",
  "37": "statementForTail   -> type id assignOp expr ; arithExpr relExpr ; id assignStat ) statBlock ; statementTail",
  "38": "statementForTail   -> id id assignOp expr ; arithExpr relExpr ; id assignStat ) statBlock ; statementTail",
  "39": "statementId        -> assignStat ; statementTail",
  "40": "statementIdTwo     -> assignStat ; statementIdThree",
  "41": "statementIdThree   -> EPSILON",
  "42": "statementIdThree   -> id statementIdTwo",
  "43": "statementTail      -> id statementId",
  "44": "statementTail      -> statement",
  "45": "assignStat         -> variable assignOp expr",
  "46": "statBlock          -> { statBlockTail }",
  "47": "statBlock          -> statement",
  "48": "statBlock          -> id statementId",
  "49": "statBlockTail      -> statement",
  "50": "statBlockTail      -> id statementId",
  "51": "expr               -> arithExpr exprTail",
  "52": "exprTail           -> relExpr",
  "53": "exprTail           -> EPSILON",
  "54": "relExpr            -> relOp arithExpr",
  "55": "arithExpr          -> term arithExprTail",
  "56": "arithExprTail      -> addOp term arithExprTail",
  "57": "arithExprTail      -> EPSILON",
  "58": "sign               -> +",
  "59": "sign               -> -",
  "60": "term               -> factor termTail",
  "61": "termTail           -> multOp factor termTail",
  "62": "termTail           -> EPSILON",
  "63": "factor             -> ( arithExpr )",
  "64": "factor             -> floatNum",
  "65": "factor             -> id idnest",
  "66": "factor             -> intNum",
  "67": "factor             -> not factor",
  "68": "factor             -> sign factor",
  "69": "varOrFunc          -> functionCall",
  "70": "varOrFunc          -> indice",
  "71": "idnest             -> indice idnestTail",
  "72": "idnest             -> ( aParams ) idnestTail",
  "73": "idnestTail         -> . id idnest",
  "74": "idnestTail         -> id idnestTailTwo",
  "75": "idnestTail         -> EPSILON",
  "76": "idnestTailTwo      -> indice",
  "77": "idnestTailTwo      -> functionCall",
  "78": "functionCall       -> ( aParams )",
  "79": "variable           -> [ arithExpr ] indice variableTail",
  "80": "variable           -> EPSILON",
  "81": "variable           -> . id idnest",
  "82": "variableTail       -> . id idnest",
  "83": "variableTail       -> EPSILON",
  "84": "indice             -> [ arithExpr ] indice",
  "85": "indice             -> EPSILON",
  "86": "arraySize          -> [ intNum ] arraySize",
  "87": "arraySize          -> EPSILON",
  "88": "type               -> float",
  "89": "type               -> int",
  "90": "fParams            -> type id arraySize fParamsTail",
  "91": "fParams            -> id id arraySize fParamsTail",
  "92": "fParams            -> EPSILON",
  "93": "aParams            -> expr aParamsTail",
  "94": "aParams            -> EPSILON",
  "95": "fParamsTail        -> , fParamsTailTwo",
  "96": "fParamsTail        -> EPSILON",
  "97": "fParamsTailTwo     -> type id arraySize fParamsTail",
  "98": "fParamsTailTwo     -> id id arraySize fParamsTail",
  "99": "aParamsTail        -> , expr aParamsTail",
  "100": "aParamsTail       -> EPSILON",
  "101": "assignOp          -> =",
  "102": "relOp             -> eq",
  "103": "relOp             -> geq",
  "104": "relOp             -> gt",
  "105": "relOp             -> leq",
  "106": "relOp             -> lt",
  "107": "relOp             -> neq",
  "108": "addOp             -> +",
  "109": "addOp             -> -",
  "110": "addOp             -> or",
  "111": "multOp            -> *",
  "112": "multOp            -> /",
  "113": "multOp            -> and"
}
module.exports = {
  RULES,
};
