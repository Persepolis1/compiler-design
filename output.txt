Sentencial Form:
 prog 
USED RULE :
 prog                -> classDecl funcDef program funcBody ; 

Sentencial Form:
 classDecl @funcDefList funcDef program funcBody @4,1 ; 
USED RULE :
 classDecl           -> EPSILON 

Sentencial Form:
 funcDef program funcBody @4,1 ; 
USED RULE :
 funcDef            -> EPSILON 

Sentencial Form:
 program funcBody @4,1 ; 
USED RULE :
 funcBody           -> { funcBodyInner } 

Sentencial Form:
 program { funcBodyInner } @4,1 ; 
USED RULE :
 funcBodyInner      -> varDecl statement 

Sentencial Form:
 program { varDecl statement } @4,1 ; 
USED RULE :
 varDecl            -> type id varDeclTail 

Sentencial Form:
 program { type @id id varDeclTail statement } @4,1 ; 
USED RULE :
 type               -> int 

Sentencial Form:
 program { int id varDeclTail statement } @4,1 ; 
USED RULE :
 varDeclTail        -> arraySize ; varDeclTailTwo 

Sentencial Form:
 program { int id arraySize ; @4,1 @2,1 varDeclTailTwo statement } @4,1 ; 
USED RULE :
 arraySize          -> EPSILON 

Sentencial Form:
 program { int id ; varDeclTailTwo statement } @4,1 ; 
USED RULE :
 varDeclTailTwo     -> id varDeclTailThree 

Sentencial Form:
 program { int id ; id varDeclTailThree statement } @4,1 ; 
USED RULE :
 varDeclTailThree   -> varDeclId 

Sentencial Form:
 program { int id ; id varDeclId statement } @4,1 ; 
USED RULE :
 varDeclId          -> id varDeclTail 

Sentencial Form:
 program { int id ; id id varDeclTail statement } @4,1 ; 
USED RULE :
 varDeclTail        -> arraySize ; varDeclTailTwo 

Sentencial Form:
 program { int id ; id id arraySize ; @4,1 @2,1 varDeclTailTwo statement } @4,1 ; 
USED RULE :
 arraySize          -> EPSILON 

Sentencial Form:
 program { int id ; id id ; varDeclTailTwo statement } @4,1 ; 
USED RULE :
 varDeclTailTwo     -> varDecl 

Sentencial Form:
 program { int id ; id id ; varDecl statement } @4,1 ; 
USED RULE :
 varDecl            -> type id varDeclTail 

Sentencial Form:
 program { int id ; id id ; type @id id varDeclTail statement } @4,1 ; 
USED RULE :
 type               -> float 

Sentencial Form:
 program { int id ; id id ; float id varDeclTail statement } @4,1 ; 
USED RULE :
 varDeclTail        -> arraySize ; varDeclTailTwo 

Sentencial Form:
 program { int id ; id id ; float id arraySize ; @4,1 @2,1 varDeclTailTwo statement } @4,1 ; 
USED RULE :
 arraySize          -> EPSILON 

Sentencial Form:
 program { int id ; id id ; float id ; varDeclTailTwo statement } @4,1 ; 
USED RULE :
 varDeclTailTwo     -> EPSILON 

Sentencial Form:
 program { int id ; id id ; float id ; statement } @4,1 ; 
USED RULE :
 statement          -> EPSILON 

Successfully parsed! 
 program { int id ; id id ; float id ; } ; 
Token Stream : 
 program { int id ; id id ; float id ; } ; $